<!DOCTYPE HTML>
<html>
<head>
  <title><%= title %></title>
  <script src="javascripts/vis.js"></script>
  <script src="javascripts/jquery.min.js"></script>
  <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.5/jspdf.min.js"></script> -->
  <link href="stylesheets/Roboto.css" rel="stylesheet">
  <link href="stylesheets/vis.css" rel="stylesheet" type="text/css">
  <link rel="shortcut icon" href="assets/favicon.ico">
  <link href="stylesheets/style.css" rel="stylesheet" type="text/css">

  <script src="/socket.io/socket.io.js"></script>
 
  <script type="text/javascript">
    var allNodes = new Object()
    var allEdges = new Object()
    var nodesDataset, edgesDataset;
    var network_type = 1;
    var highlightActive = false;
    var local_data = true;
    var current_app;
    var network;
    var show_port = true;
	var edge_with_box = false;
	var port_summary = true;
    var excl_ports={
        'TCP': [],
        'UDP': [],
        'ICMP': [],
        'IGMP': []
    }
    var appDetails;

    // ... load a visualization
    function loadApps() {
        var apipath = '/api/apps';
        if( local_data)
            apipath = '/data/all.json';
        $.ajax( {url: apipath, success : function (result) {
            var data = result;
            $('#applications').empty();
            var idx = 0
            for( app of data) {
                var ver = null;
                if ( app.version )
                    ver = app.version 
                else if ( app.latest_adm_version)
                    ver = app.latest_adm_version
                $('#applications').append("<li class='application-list'><p class='text-app-list' id='app-" + idx + "' data-app-id='" + app.id + "' data-app-ver='"+ver+"' >" + app.name + " [by: " + app.author +"] </p></li>");
                document.getElementById('app-'+idx).addEventListener('click', showDiagram, false);
                document.getElementById('app-'+idx).addEventListener('click', showServerName, false);
                idx = idx + 1;
            }
        }}); 
    }

    function loadDot( appid, ver) {
        if ( current_app != appid) 
            ver = null;
        current_app = appid;
        var apipath = '';
        if (local_data)
            apipath = '/api/fapps/';
        else
            apipath = '/api/apps/';
        $.ajax({url: apipath + appid+'?version='+ver, success: function(result) {
            var container = document.getElementById('visualization');
            var options = {
                width: "100%",
                height: "900",
                clickToUse: true,
                edges: {
                    smooth: {
//                        forceDirection: "none",
                        type: 'continuous',
                        roundness: 0
                    }
                },
                nodes: {
                    font: {size: 9},
                    color: {background: 'orange', highlight: 'darkorange', hover: 'darkorange'}
                },
                physics: {
                    barnesHut: {
                        damping: 0.07,
                        avoidOverlap: 1
                    },
                    maxVelocity: 0,
                    minVelocity: 0.1,
                    timestep: 0
                },
                interaction:{ 
                    hover: true
                }
            }

            if ( network_type == 2) {
                options.layout = { hierachical: { direction: 'RL'}}
            }
            
            //hierarchical network type 
            if ( network_type == 2) {
                options.layout = { hierarchical: { direction: 'RL'}}
            }
            nodesDataset = new vis.DataSet( result.nodes) 
            edgesDataset = new vis.DataSet( result.edges); 
            var data = {nodes: nodesDataset, edges: edgesDataset}
            network = new vis.Network( container, data, options);
            allNodes = nodesDataset.get({returnType:"Object"});
            allEdges = edgesDataset.get({returnType:"Object"});
            network.on('click', neighbourhoodHighlight);
            /*
            network.on("showPopup", function (params) {
                //console.log('showPopup Event ' + JSON.stringify(params, null,2))
            });
            network.on("hidePopup", function (params) {
                //console.log('hidePopup Event' + + JSON.stringify(params, null,2));
            });
            */
            //download link activate 
            document.getElementById("download").addEventListener('click', export_image, false);
            document.getElementById("loader").style.display='none';
            document.getElementById("tab-bar-down").classList.add('drop-menu')   
            //save diagram position 
            document.getElementById("savediagram").addEventListener('click', saveDiagramPosition, false);

            //Unixtimestamp convert format
            var timeString = result.detail.creation
            var tdate = new Date(timeString*1000);
            var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
            var year = tdate.getFullYear();
            var month = months[tdate.getMonth()];
            var date = tdate.getDate();
            var hour = tdate.getHours();
            var min = tdate.getMinutes();
            var sec = tdate.getSeconds();
            var time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;
            
            //fillout application detail desc 
            document.getElementById("app_detail_name").innerText = result.detail.name;
            document.getElementById("app_detail_desc").textContent = result.detail.description;
            document.getElementById("app_detail_author").textContent = result.detail.author;
            document.getElementById("app_detail_version").innerHTML = convertVersionsToHTML(result.detail.version_list, ver)
            document.getElementById("app_detail_primary").textContent = result.detail.primary;
            document.getElementById("app_detail_create").textContent = time;
            //console.log(result.detail.version_list)
        }});
    }

    function handleFileSelect(){
        if (window.File && window.FileReader && window.FileList && window.Blob) {
        } else {
            alert('The File APIs are not fully supported in this browser.');
            return;
        }   
        input = document.getElementById('fileinput');
        if (!input) {
            alert("Um, couldn't find the fileinput element.");
        }
        else if (!input.files) {
            alert("This browser doesn't seem to support the `files` property of file inputs.");
        }
        else if (!input.files[0]) {
            alert("Please select a file before clicking 'Load'");               
        }
        else {
            file = input.files[0];
            fr = new FileReader();
            fr.onload = receivedText;
            fr.readAsText(file);
        }
    } 
    function receivedText() {           
        //result = fr.result;
        var json_obj = JSON.parse(fr.result);
        console.log(json_obj);
        loadLocalDot(json_obj);

    }
    function handleFileSelect(){
        if (window.File && window.FileReader && window.FileList && window.Blob) {
            // nothing 
        } else {
            alert('The File APIs are not fully supported in this browser.');
            return;
        }   
        input = document.getElementById('fileinput');
        if (!input) {
            alert("Um, couldn't find the fileinput element.");
        }
        else if (!input.files) {
            alert("This browser doesn't seem to support the `files` property of file inputs.");
        }
        else if (!input.files[0]) {
            alert("Please select a file before clicking 'Load'");               
        }
        else {
            file = input.files[0];
            fr = new FileReader();
            fr.onload = receivedText;
            fr.readAsText(file);
        }
    }       

    function receivedText() {           
        //result = fr.result;
        var json_obj = JSON.parse(fr.result);
        console.log(json_obj);
        loadLocalDot(json_obj);
    }   
    function toggleNetworkType() {
        if ( network_type == 1)
            network_type = 2;
        else 
            network_type = 1;
    }
    function saveDiagramPosition() {
        var node_pos = { body:'', appid: current_app};
        node_pos.body = network.getPositions();
        node_pos.appid = current_app;
        var el = document.getElementById('versionselect')
        var ver = null
        if ( el )
            ver = el.options[el.selectedIndex].value;
        saveLocation( node_pos, ver); 
    }
    
    function showDiagram( event) {
        var appid = event.target.getAttribute('data-app-id')
        var ver = event.target.getAttribute('data-app-ver')
        if( ver == undefined)
            ver = "null"
        //console.log('showDiagram with ' + ver)
        loadDot( appid, ver);
        getLocation( appid, ver);
    }

    function showDiagramWithVersion( appid ) {
        var el = document.getElementById('versionselect')
        //console.log(el)
        var ver = null
        if ( el )
            ver = el.options[el.selectedIndex].value;
        //console.log('showDiagramWithVersion with ' + ver)
        loadDot( appid, ver);
        getLocation( appid, ver);        
    }

    function showServerName(event){
        var appname = $(this).prop('innerText');
        var serverNmae = document.getElementById("list-name-on-menu");
        serverNmae.innerHTML=appname
    }

    function export_image( ) {
        var filename = prompt('Input file name(default png extenstion) ')
        if ( !filename )
            return;
        try {
            link = document.getElementById("download");
            var canvas = $('#visualization > div > canvas').get(0);
            canvas.getContext('2d');
            link.href = canvas.toDataURL();
            link.download = filename;
        } catch(e) {
            alert("Error description: " + e.message);
        }
    }

    function convertVersionsToHTML( versions, ver) {
        var htmlresp = '<select id=\"versionselect\" name=\"version\" onchange=\"switchVersion()\" >'
        for (var v in versions) {
            if ( versions[v] == ver || (ver == null && v == versions.length -1))
                htmlresp += '<option selected value=\"' + versions[v] + '\">' + 'v'+ versions[v] +'</option>'
            else
                htmlresp += '<option value=\"' + versions[v] + '\">' + 'v'+ versions[v] +'</option>'
        }
        return htmlresp += "</select>"
    }

    function switchVersion( ) {
        return showDiagramWithVersion( current_app);
    }

    function getColor( shape, depth) {
        if ( shape == 'box' ) { // scope, inventory_filter 
            if (depth == 0) {
                return {background:'lightblue', highlight: 'rgb(58, 133, 255)', hover: 'rgb(58, 133, 255)'}
            } else if( depth == 1) { // direct connected 
                return {background: 'lightblue', highlight: 'lightblue', hover: 'rgb(58, 133, 255)'}
            } else if ( depth == 2) {
                return {background: 'lightblue', highlight: 'lightblue', hover: 'rgb(58, 133, 255)'}
            } else {
                return {background:'lightblue', highlight:'lightblue', hover: 'rgb(58, 133, 255)'}
            }
        } else if ( shape == 'ellipse') { // scope, inventory_filter 
            if (depth == 0) {
                return {background:'orange', highlight:'darkorange'}
            } else if( depth == 1) { // direct connected 
                return {background: 'lightorange', highlight: 'lightorange'}
            } else if ( depth == 2) {
                return {background: 'lightorange', highlight: 'lightorange'}
            } else {
                return {background:'orange', highlight:'darkorange'}
            }
        }
    }
    function neighbourhoodHighlight(params) {
        // if something is selected:
        if (params.nodes.length > 0) {
            highlightActive = true;
            var i,j;
            var selectedNode = params.nodes[0];
            var degrees = 2;
            //console.log('selected ' + selectedNode);
            // mark all nodes as hard to read.
            for (var nodeId in allNodes) {
                allNodes[nodeId].color = {background: 'rgba(200,200,200,0.5)'};
                if (allNodes[nodeId].hiddenLabel === undefined) {
                    allNodes[nodeId].hiddenLabel = allNodes[nodeId].label;
                    allNodes[nodeId].label = undefined;
                }
            }

            for (var edgeId in allEdges) {
                allEdges[edgeId].color = 'rgba(200,200,200,0.5)';
                if (allEdges[edgeId].hiddenLabel === undefined) {
                    allEdges[edgeId].hiddenLabel = allEdges[edgeId].label;
                    allEdges[edgeId].label = undefined;
                }
            }
            var connectedNodes = network.getConnectedNodes(selectedNode);
            var allConnectedNodes = [];
            /*
            // get the second degree nodes
            for (i = 1; i < degrees; i++) {
                for (j = 0; j < connectedNodes.length; j++) {
                    allConnectedNodes = allConnectedNodes.concat(network.getConnectedNodes(connectedNodes[j]));
                }
            }

            // all second degree nodes get a different color and their label back
            for (i = 0; i < allConnectedNodes.length; i++) {
                allNodes[allConnectedNodes[i]].color.highlight = 'rgba(150,150,150,0.75)';
                if (allNodes[allConnectedNodes[i]].hiddenLabel !== undefined) {
                    allNodes[allConnectedNodes[i]].label = allNodes[allConnectedNodes[i]].hiddenLabel;
                    allNodes[allConnectedNodes[i]].hiddenLabel = undefined;
                }
            }
            */

            // all first degree nodes get their own color and their label back
            for (i = 0; i < connectedNodes.length; i++) {
                allNodes[connectedNodes[i]].color = getColor( allNodes[connectedNodes[i]].shape, 0);
                if (allNodes[connectedNodes[i]].hiddenLabel !== undefined) {
                    allNodes[connectedNodes[i]].label = allNodes[connectedNodes[i]].hiddenLabel;
                    allNodes[connectedNodes[i]].hiddenLabel = undefined;
                }
            }
            var connectedEdges = network.getConnectedEdges(selectedNode);
            for( i=0; i<connectedEdges.length; i++) {
                allEdges[connectedEdges[i]].color = 'rgb(19, 110, 214)';
                if( allEdges[connectedEdges[i]].hiddenLabel !== undefined ) {
                    allEdges[connectedEdges[i]].label = allEdges[connectedEdges[i]].hiddenLabel;
                    allEdges[connectedEdges[i]].hiddenLabel = undefined;
                }
            }

            // the main node gets its own color and its label back.
            console.log(allNodes[selectedNode]);
            allNodes[selectedNode].color = getColor( allNodes[selectedNode].shape, 0);
            if (allNodes[selectedNode].hiddenLabel !== undefined) {
                allNodes[selectedNode].label = allNodes[selectedNode].hiddenLabel;
                allNodes[selectedNode].hiddenLabel = undefined;
            }
        } else if (params.edges.length > 0 && local_data == false) {
//////////////////////////////////////////////////////////////////////////////
			// display the packet usage on the selected edge in case of online access //

// get edge
			alert("params: " + JSON.stringify(params));	
			var selectedEdge = params.edges[0];

// get two nodes of the edge
			var connectedNodes = network.getConnectedNodes(selectedEdge);
			alert("connected nodes: " + JSON.stringify(connectedNodes));	

// get info of the two nodes 
			for (var nodeId in allNodes) {
				if (nodeId == connectedNodes[0]) {
					alert("first connected node: " + allNodes[nodeId].label);
				}
				else if (nodeId == connectedNodes[1]) {
					alert("second connected node: " + allNodes[nodeId].label);
				}
			}

// get "flow filter" from the "adm filter label" -_-;


// query the flow date using the "flow filter"


// display the flow information on the edge


//////////////////////////////////////////////////////////////////////////////

        } else {
            if (highlightActive === true) {
                //console.log('no node selected')
                // reset all nodes
                for (var nodeId in allNodes) {
                    allNodes[nodeId].color = getColor( allNodes[nodeId].shape, 3);
                    if (allNodes[nodeId].hiddenLabel !== undefined) {
                        allNodes[nodeId].label = allNodes[nodeId].hiddenLabel;
                        allNodes[nodeId].hiddenLabel = undefined;
                    }
                }
                //
                for (var edgeId in allEdges) {
                    allEdges[edgeId].color = 'rgb(19, 110, 214)';
                    if( allEdges[edgeId].hiddenLabel !== undefined ) {
                        allEdges[edgeId].label = allEdges[edgeId].hiddenLabel;
                        allEdges[edgeId].hiddenLabel = undefined;
                    }
                }
                highlightActive = false;
            }
        }

        // transform the object into an array
        var updateArray = [];
        for (nodeId in allNodes) {
            if (allNodes.hasOwnProperty(nodeId)) {
                updateArray.push(allNodes[nodeId]);
            }
        }
        nodesDataset.update(updateArray);
        updateArray = []
        for( edgeId in allEdges) {
            if( allEdges.hasOwnProperty(edgeId)) {
                updateArray.push( allEdges[edgeId])
            }
        }
        edgesDataset.update(updateArray)
    }

    function saveLocation( params, ver) {
        $.ajax( {   url: '/api/apps/pos/' + params.appid + '?version='+ver, 
                    type: 'post', 
                    data: JSON.stringify(params.body), 
                    contentType: 'application/json', 
                    success : function (result) {  alert('Diagram position saved...')}
            });         
    }

    function getLocation( appid, ver) {
        $.ajax( {   url: '/api/apps/pos/'+ appid +'?version='+ ver,
                    type: 'get',
                    success: function(result) {
                        Object.keys(result).forEach( function(key) {
                            network.moveNode( key,  Number(result[key].x), Number(result[key].y));
                        });
                        network.redraw();
                    }
                });
    }

    function getVersionList(appid) {
        var versions = []
        $.ajax( {   url: '/api/fapps/:appid/versions',
                    type: 'get',
                    success: function(result) {
                        versions = result;
                    }});
        return versions;
    }
    //-framework
    
    // $(window).on('mousemove', function () {
    //   $('.tab-bar-wrap').addClass('drop-menu');
    //       try {
    //         clearTimeout(timer);
    //   } catch (e) {}
    //       timer = setTimeout(function () {
    //         $('.tab-bar-wrap').removeClass('drop-menu');
    //       }, 800);
    // });

    $(window).on('load',function() {
        console.log(".window: on");
        $("#loader").fadeOut("slow");
    });

    $(document).ready(function(){

        $('.list-tab-bar-1').click(function(){return false;})

        $('#nav-icon1').click(function(){
            console.log("#nav-icon1: click");
            $(this).toggleClass('open');
        });

        $(".left-menu-col-1").click(function(event){
            event.preventDefault();
            $(".side-menu").toggleClass("menushow");
            $("#nav-icon1").toggleClass("close");
            $("#fileinput").hide();
            $("#btnLoad").hide();
        });

        $(".left-menu-col-2").click(function(event){
            console.log('left-menu-col-2 clicked')
            event.preventDefault();
            $("#fileinput").show();
            $("#btnLoad").show();
            //$('.tab-bar-widget-1').removeClass('show-detail');

            //$(".side-menu").toggleClass("menushow");
            //$("#nav-icon1").toggleClass("close"); 
            //var win = window.open("/localdot","_self");  
            //var win = window.open("/alert","Alert Viewer");
        });

        $(".left-menu-col-3").click(function(event){
            event.preventDefault();
            var win = window.open("/alert","Alert Viewer");
            //alertlog();
            //$(".side-menu").toggleClass("menushow");
            //$("#nav-icon1").toggleClass("close");
        });
        
        $("#nav-icon1").click(function(event){
            event.preventDefault();
            $(".side-menu").toggleClass("menushow");   
        });

        //$("#alarm").click(function(event){
        //event.preventDefault();
       //$(".alarm-page-wrap").toggleClass("pageshow");   
       // });

        //$("#profile").click(function(event){
        //event.preventDefault();
        //$(".profile-page-wrap").toggleClass("pageshow-profile");   
        //});

        $(".side-menu-col-1").hover(function(){
           $('.side-menu-sub').show();
        },function(){
            $('.side-menu-sub').hide();
        });

        $(".side-menu-sub").hover(function(){
            $('.side-menu-sub').show();
        },function(){
           $('.side-menu-sub').hide();
        });

        $(".side-menu-sub").hover(function(){
           $('.side-menu-col-1').css('background-color', '#268fd4');
        },function(){
            $('.side-menu-col-1').css('background-color', '');
        });

        $(".side-menu-sub").click(function(){
           $('.side-menu').toggleClass('menushow');
           $('#nav-icon1').toggleClass('open');
           $('.side-menu-sub').hide();
        });

        $(".list-tab-bar-1").click(function(){
            $(this).css('background-color', 'hsla(204, 100%, 37%, 0.34)');
            $(this).css('color', 'white');
            $('.tab-bar-widget-1').addClass('show-detail')          
        })

        $(".btn-remove-bar").click(function(){
            $(".list-tab-bar-1").css('background-color', 'white');
            $(".list-tab-bar-1").css('color', '#0071C1');
            $('.tab-bar-widget-1').removeClass('show-detail');
        })

        // $(".list-tab-bar").hover(function(){
        //     $(this).css('background-color', 'hsla(204, 100%, 37%, 0.34)');
        // }),function(){
        //     $(this).css('background-color', 'white');
        // }


        // $(".loader").hide();


        $(".side-menu-sub").click(function(){
            $("#loader").show();
            $('#visualization').on('load', function(){
                $("#loader").hide();
            })
        })
        $("#btnLoad").click(function(){
            console.log("btnload for file open");
            $("#fileinput").hide();
            $("#btnLoad").hide();
            $("#loader").show();
            $('#visualization').on('load', function(){
                $("#loader").hide();
            })
           
        })

        $("#versionselect").change( function( ver) {
            console.log('version change click')
            alert( 'selected version is ' + ver);
        });
    });

  </script>

</head>
<body onload="loadApps();">
    
    <div id="container">
        <!-- top navigation -->
        <div class="nav">
            <div class="ham-wrap">
                <div id="nav-icon1">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
            </div>
            <div class="cisco-logo-wrap">
                <div class="logo-img-wrap" type="button" value="Reload Page" onClick="window.location.reload">
                    <img class="logo-img" src="assets/logo-300.png" alt="">
                </div>
            </div>  
            <div class="nav-button-wrap">
                <div class="nav-button nav-button-1" id="alarm">
                    <div class="circle-icon">
                        <span class="icon-Asset icon-Asset-6"></span>
                    </div>
                </div>
                <div class="nav-button nav-button-2">
                    <div class="circle-icon">
                        <span class="icon-Asset icon-Asset-10"></span>
                    </div>
                </div>
                <div class="nav-button nav-button-3">
                    <div class="circle-icon">
                        <span class="icon-Asset icon-Asset-8"></span>
                    </div>
                </div>
                <div class="nav-button nav-button-4" id="profile">
                    <div class="circle-icon">
                        <span class="icon-Asset icon-Asset-9"></span>
                    </div>
                </div>
            </div>
        </div>

        <div class="nav-tab-bar">
            <div id="tab-bar-down" class="tab-bar-wrap">
                <ul class="ul-tab-bar">
                    <li id="list-name-on-menu" class="list-tab-bar list-tab-bar-0"></li>
                    <li id="detail-btn" class="list-tab-bar-left list-tab-bar-clickable list-tab-bar list-tab-bar-1">Detail</li>
                    <a href="#" id="download"><li id="download-btn" class="list-tab-bar list-tab-bar-left download-btn-text list-tab-bar-2 list-tab-bar-clickable">Download</li></a>
                    <a href="#" id="savediagram"><li id="toggle-btn" class="list-tab-bar list-tab-bar-left list-tab-bar-3 list-tab-bar-clickable">Save Diagram</li></a>
                </ul>
            </div>
        </div>

        <div class="tab-bar-widget-wrap">
            <div id="detail-move" class="tab-bar-widget tab-bar-widget-1">
                <div class="widget-contents-wrap">
                    <div class="top-widget-btn-wrap">
                        <div class="btn-remove-bar-wrap">
                            <div class="btn-remove-bar">
                                <span class="icon-Asset-4"></span>
                            </div>
                        </div>
                    </div>
                    <!--Title-->

                    <div class="table-title-wrap">
                        <div id="app_detail_name" class="table-title">
                            Detail
                        </div>
                    </div>

                    <!--table-->
                    <div class="table-wrap">
                        <table class="detail-table">
                                <tr>
                                    <td class="col1">Description</td>
                                    <td id="app_detail_desc"></td>
                                </tr>
                                <tr>
                                    <td class="col1">Author</td>
                                    <td id="app_detail_author"></td>
                                </tr>
                                <tr>
                                    <td class="col1">Creation Time</td>
                                    <td id="app_detail_create"></td>
                                </tr>
                                <tr>
                                    <td class="col1">Version</td>
                                    <td id="app_detail_version"><select name='version'></select></td>
                                </tr>
                                <tr>
                                    <td class="col1">Primary</td>
                                    <td id="app_detail_primary"></td>
                                </tr>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="nav-2">
            <div class="left-menu-wrap">
                <div class="left-menu-col left-menu-col-1">
                    <div class="nav-2-icon-wrap">
                        <span class="icon-Asset-b icon-Asset-9oct27"></span>
                    </div>
                </div>
                <div class="left-menu-col left-menu-col-2">
                    <div class="nav-2-icon-wrap">
                        <span class="icon-Asset-b icon-Asset-15"></span>
                        <!-- <span class="icon-Asset-b icon-Asset-15 icon-Asset-b-nonclickable"></span> -->
                    </div>
                </div>
                <div class="left-menu-col left-menu-col-3">
                    <div class="nav-2-icon-wrap">
                        <span class="icon-Asset-b icon-Asset-16"></span>
                      <!--  <span class="icon-Asset-b icon-Asset-16 icon-Asset-b-nonclickable"></span> -->
                    </div>
                </div>
                <div class="left-menu-col left-menu-col-4">
                    <div class="nav-2-icon-wrap">
                        <span class="icon-Asset-b icon-Asset-12 icon-Asset-b-nonclickable"></span>
                    </div>
                </div>
                <div class="left-menu-col left-menu-col-5">
                    <div class="nav-2-icon-wrap">
                        <span class="icon-Asset-b icon-Asset-13 icon-Asset-b-nonclickable"></span>
                    </div>
                </div>
            </div>

            <div class="left-menu-info-wrap">
                <div class="left-menu-info">
                    <span class="icon-Asset icon-Asset-2"></span>
                </div>
            </div>
        </div>

        <div class="side-menu menushow">
            <div class="side-menu-col-wrap">
                <div class="side-menu-col side-menu-col-1" onclick="location.href='#';" style="cursor: pointer;">
                    <p class="title">Application List</p>
                </div>
            </div>
        </div>

        <div class="side-menu-sub">
            <ul class="application-list-wrap" id="applications">
                <!-- need to add click event 
                <li class="application-list">
                        <p class="text-app-list" id="list-1">Number one</p>
                </li>
                -->
            </ul>
        </div>
        <!--Left Side Menu-->

        <div class="alarm-page-wrap">           
        </div>
        <!--Alram Page-->

        <div class="profile-page-wrap">         
        </div>
        <!--profile-page-->

        <!-- <div class="download-btn-wrap">
            <div class="download-btn">
                <div id="download" class="download-btn-text" style="cursor:pointer"><span class="icon-Asset-42"></span></div>
            </div>
        </div> -->


        <div class="content-wrap">
            <div class="viz-wrap">
                    <input type="file" id="fileinput" hidden/>
                    <input type='button' id='btnLoad' value='load' onclick='handleFileSelect();' hidden>
                <div id="loader"></div>
                <div id="visualization" height="100%" width="100%"></div>
            </div> 
        </div>
    </div>
</body>
</html>
